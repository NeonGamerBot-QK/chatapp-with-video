import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
//navbar
import Container from 'react-bootstrap/Container';
import Nav from 'react-bootstrap/Nav';
import Navbar from 'react-bootstrap/Navbar';
import io, { Socket} from "socket.io-client";
import { useRouter } from 'next/router'
type Message = {
  author: string;
  message: string;
};
let socket:Socket | null;
const Home: NextPage = () => {
  // tut
  const theDate:Date = new Date("10/1/2022")
  const todaysDate:Date = new Date();
  const [days, setDays] = useState(Math.round((theDate.getTime() - todaysDate.getTime()) / (24 * 60 * 60 * 1000)))

const router =   useRouter()
  const [username, setUsername] = useState("");
  const [typing, setTyping] = useState<string[]>([]);
  const [chosenUsername, setChosenUsername] = useState("");
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState<Array<Message>>([]);

  const CallSocket = async () => {
    await fetch("/api/socket");
    socket = io();
    socket.on("messages", (msgs: Message[]) => {
      // setMessages((currentMsg) => [
      //   ...currentMsg,
      //   { author: msg.author, message: msg.message },
      // ]);
      console.log(msgs)
   setMessages(msgs)
    })
    console.debug(router.asPath.slice(1))
    socket.on("typing", (user: string, isTyping: boolean) => {
      if(isTyping) {
        setTyping((oldTyping) => [
          user, 
          ...oldTyping.filter(u => u !== user),
          ]
        )
      } else {
        setTyping((oldTyping) => {
          return oldTyping.filter(u => u !== user)
        })
      }
    })
  }
  const handleKeypress = (e: any) => {
    //it triggers by pressing the enter key
    if (e.keyCode === 13) {
      if (message) {
        sendMessage();
      }
    }
  };
  const sendMessage = async () => {
    if (message === "") {
      return;
    }
    console.debug("sendMessage() called", socket)

    socket?.emit("messageCreate", { author: chosenUsername, message });
    // setMessages((currentMsg) => [
    //   ...currentMsg,
    //   { author: chosenUsername, message },
    // ]);
    socket?.emit("message:request")
    setMessage("");
  };
  useEffect(() => {
CallSocket()
  }, [CallSocket])
  useEffect(() => {
   /**
    * @see https://github.com/facebook/react/issues/14920
    * @returns number
    */
    const updateDate:Function = ():number => {
      const theDate:Date = new Date("10/1/2022")
      const todaysDate:Date = new Date();
    return Math.round((theDate.getTime() - todaysDate.getTime()) / (24 * 60 * 60 * 1000))
    }
const interval = setInterval(() => {
  setDays(updateDate())
}, 500)
return clearInterval(interval)
  }, [setDays])
  return (
    <div className={styles.mycontainer}>
      <Head>
        <title>Chat app</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
{/* NavBar */}
<Navbar expand="lg" className='navbar-dark'>
<Container>
        <Navbar.Brand href="#">Chat app</Navbar.Brand>
        <Navbar.Toggle aria-controls="basic-navbar-nav" />
        <Navbar.Collapse id="basic-navbar-nav">
          <Nav className="me-auto">
            <Nav.Link href="#main">Home</Nav.Link>
            <Nav.Link href="https://saahild.com/?ref=chatapp">My Site</Nav.Link>
          </Nav>
        </Navbar.Collapse>
      </Container>
</Navbar>
<br />
      <main className={styles.mymain} id="main">
        <h1 className={styles.mytitle}>
         Chat App
        </h1>

        <p className={styles.mydescription}>
Chat App by saahil
        </p>

        <div className={styles.mygrid}>
          <div className={styles.mycard}>
          <h2>Comming Soon</h2>
            <p>This site will be Comming soon will be finished in {days} days </p>
          </div>
          {!chosenUsername ? 
           <div className={styles.mycard}>
          <h2>Username</h2>
          <input
            type="text"
            placeholder="Identity..."
            value={username}
            className="p-3 rounded-md outline-none"
            onChange={(e) => setUsername(e.target.value)}
          />
          <button
            onClick={() => {
              setChosenUsername(username);
            }}
            className="rounded-md px-4 py-2 text-xl"
          >
              Go!
          </button>
          </div> : 
            <div className={styles.mycard}>
          <h2>Chat</h2>
          {messages.map((msg, i) => {
                return (
                  <div
                    className="w-full py-1 px-2 border-b border-gray-200"
                    key={i}
                  >
                    {msg.author} : {msg.message}
                  </div>
                );
              })}
                <input
                type="text"
                placeholder="New message..."
                value={message}
                className="outline-none py-2 px-2 rounded-bl-md flex-1"
                onChange={(e) => {
                socket?.emit("user:typing", chosenUsername, true)
                setTimeout(() => {
                  socket?.emit("user:typing", chosenUsername, false)
console.log("ended")
                }, 2000)
                  setMessage(e.target.value)
                }}
                onKeyUp={handleKeypress}
              />
              <div className="border-l border-gray-300 flex justify-center items-center  rounded-br-md group hover:bg-purple-500 transition-all">
                <button
                  className="group-hover:text-white px-3 h-full"
                  onClick={() => {
                    sendMessage();
                  }}
                >
                  Send
                </button>
                {typing.length !== 0 ? <p> {typing.length > 10 ? `${typing.slice(0, 10).join(", ")}` : typing.join(", ")} is typing {typing.length > 10 ? `and so are ${typing.slice(10).length} people` : null}...</p> : null}
              </div>
          </div>
}
          {/* <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a> */}
        </div>
      </main>

      <footer className={styles.myfooter}>
       &copy; Saahil - 2022
      </footer>
    </div>
  )
}

export default Home
